/*
设有 N×N 的方格图，我们在其中的某些方格中填入正整数，而其它的方格中则放入数字0。如下图所示：

图1

某人从图中的左上角 A 出发，可以向下行走，也可以向右行走，直到到达右下角的 B 点。

在走过的路上，他可以取走方格中的数（取走后的方格中将变为数字0）。

此人从 A 点到 B 点共走了两次，试找出两条这样的路径，使得取得的数字和为最大。

输入格式
第一行为一个整数N，表示 N×N 的方格图。

接下来的每行有三个整数，第一个为行号数，第二个为列号数，第三个为在该行、该列上所放的数。

行和列编号从 1 开始。

一行“0 0 0”表示结束。

输出格式
输出一个整数，表示两条路径上取得的最大的和。

数据范围
N≤10
输入样例：
8
2 3 13
2 6 6
3 5 7
4 4 14
5 2 21
5 6 4
6 3 15
7 2 14
0 0 0
输出样例：
67
*/

/*
摘花生：只走一次
    f[i][j] 表示所有从(1,1)走到(i,j)的路径的最大值
    f[i][j] = max((f[i][j - 1]), f[i - 1][j]) + w[i][j]; 

方格取数：走两次
    f(i1,j1,i2,j2) 表示所有从(1,1)分别走到(i1,j1)、(i2,j2)的路径的最大值
    
    如何处理“同一个格子不能被重复选择”
        什么时候会走到同一个格子？？？
            只有 i1+j1 == i2+j2 时两条路径的格子才有可能重合

    f[k, i1, i2]表示所有从(1,1)分别走到(i1, k-i1)、(i2, k-i2)的路径的最大值

    k表示两条路线当前走到的格子的横纵坐标之和(k = i1+i2 = i2+j2)


*/
#include <iostream>
#include <algorithm>

using namespace std;

const int N = 11;

int w[N][N];
int f[N * 2][N][N];
int num, n, m, t;

int main()
{
    cin >> num;
    int temp = num;
    while (num --)
    {
        cin >> n >> m >> t;
        w[n][m] = t;
    }

    n = temp;
    for (int k = 2; k <= n + n; k ++)
        for (int i1 = 1; i1 <= n; i1 ++)
            for (int i2 = 1; i2 <= n; i2 ++)
            {
                int j1 = k - i1;
                int j2 = k - i2;
                if (j1 >= 1 && j1 <= n && j2 >= 1 && j2 <= n)
                {
                    int t = w[i1][j1];
                    if (i1 != i2)
                        t += w[i2][j2];
                    int &x = f[k][i1][i2];
                    x = max(x, f[k - 1][i1 - 1][i2 - 1] + t);
                    x = max(x, f[k - 1][i1 - 1][i2] + t);
                    x = max(x, f[k - 1][i1][i2 - 1] + t);
                    x = max(x, f[k - 1][i1][i2] + t);
                }
            }
    cout << f[n + n][n][n];
    return 0;
}